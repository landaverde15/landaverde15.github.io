---
layout: post
title: "Adding a new Host Entry in Docker"
date: 2020-11-13 07:00:00 -0700
---

For this blog post I thought about writing about an issue I had at work this week and then explain some solutions I found to my problem. 

A team of 3 engineers and myself are working on rewriting services. The services that we are writing/developing are being hosted on AWS within a Docker container. Some of the services we write are easy. However, this week we were faced with a challenge. Or atleast I was since I haven't had much exposure. I had to write a service in Java that would make a request to internal services at my job. The internal network at my job has firewalls which meant the networking team had to give access and then i'd be able to connect to our middleware and make the requests to our inhouse services. I was told to add a hostname entry to the docker file so it could recognize the domain name for our internal network.

What the heck!

I don't know what a host file is, i dont know what a hostname is, i dont know where the host file is even located. After doing some research I became informed and found 2 solutions. I will show and explain 2 methods to adding a hostname entry into a hostfile for docker.

====> Method 1

We can add a hostname entry via the dockerfile with the following code:
{% highlight ruby %}
FROM adoptopenjdk/openjdk11-openj9
VOLUME /d/tmp
ARG JAR_FILE
ADD ${JAR_FILE} app.jar
EXPOSE 9154
ENTRYPOINT ['/bin/sh', '-c', 'echo 199.000.12.11 mpveaf.kinecta.org >> /etc/hosts && exec java -Djava.security.egd=file:/dev/./urandom -jar /app.jar']
{% endhighlight %}

Where the magic is done is the last line with the `ENTRYPOINT`. Here I configure the container to run as an executable. I pass in the `echo 199.000.12.11 mpveaf.kinecta.org >> /etc/hosts` as a parameter. Basically Im writing into the hostfile the entry I need to make. This method is used on non-cloud platforms as well.

===> Method 2

This method I was not able to perform at my job but would have made things much easier. Simply using the following command: `sudo docker run --add-host host1.test.com:192.168.0.1 --add-host host2.test.com:192.168.0.2 -ti source_container_image /bin/bash`. On running the docker container you're able to add arguments to manually add the host entry into the hostfile.

Both methods work great depending if you have access to the execution in the terminal/command prompt. Since I did not have access, I could only provide a dockerfile along with the java code and method 1 worked like a charm.

Hope this helped. Hack on!