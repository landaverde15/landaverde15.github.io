---
layout: post
title: Setting up a simple GoLang server
date: 2021-02-26 10:10:00 -0700
---
This week I started to work on my group project. As mentioned in previous blog post, our group will be creating a web application that will serve the top performing crypto currencies and stocks. For our applicaiton I decided to create the back end in GoLang. Why? Simply because it's a language that is growing in popularity + demand in the real world. So why not use this opportunity and dive into it?

To create a Go server, your application will rely on the `net/http` package. This package provides HTTP client and server implementations. For the purpose of my group project the most important line for my Go file is `log.Fatal(http.ListenAndServe(":8080", nil))`. ListenAndServe starts an HTTP server with a given address and handler. In that piece of code I wrapped my ListenAndServe with `log.Fatal` which is simply a logging package. Anything that goes wrong with our server, it will be logged (hence the wrapper log.Fatal).

The rest of the file is up to you. In my case for our group project, we will have to routes or paths which is one for crypto and the other for stocks. As a sample this is how you write the listener for the crypto path. 

`http.HandleFunc("/crypto", func(w httpResponseWriter, r *http.Request) {fmt.Fprintf(w, "HTML HERE")})`

In the sample above, `http` is the instance of the `net/http` package. `HandleFunc` handles to the response to the server path of `http://localhost:8080/crypto` and it serves the specified html to the page.

Hope this simple Go tutorial was helpful!